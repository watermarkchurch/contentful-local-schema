// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SchemaBuilder with namespace nothing looks weird 1`] = `
"type Query {
  asset(id: String): Test1_Asset
  assetCollection(skip: String, limit: String): Test1_AssetCollection
  sectionBlockText(id: String): Test1_SectionBlockText
  sectionBlockTextCollection(skip: String, limit: String): Test1_SectionBlockTextCollection
  page(id: String): Test1_Page
  pageCollection(skip: String, limit: String): Test1_PageCollection
  sectionCarousel(id: String): Test1_SectionCarousel
  sectionCarouselCollection(skip: String, limit: String): Test1_SectionCarouselCollection
  pageMetadata(id: String): Test1_PageMetadata
  pageMetadataCollection(skip: String, limit: String): Test1_PageMetadataCollection
}

type Test1_Asset {
  sys: Test1_Sys
  contentfulMetadata: Test1_ContentfulMetadata
  title: String
  description: String
  contentType: String
  fileName: String
  url: String
  size: Int
  width: Int
  height: Int
}

type Test1_Sys {
  id: String
  spaceId: String
  environmentId: String
}

type Test1_ContentfulMetadata {
  tags: [Test1_ContentfulTag]!
}

type Test1_ContentfulTag {
  id: String!
  name: String!
}

type Test1_AssetCollection {
  skip: Int!
  limit: Int!
  total: Int!
  items: [Test1_Asset]!
}

type Test1_SectionBlockText implements Test1_Entry {
  internalTitle: Never
  body: String!
  bookmarkTitle: String
  style: Test1_SectionBlockTextStyle
}

interface Test1_Entry {
  sys: Test1_Sys
  contentfulMetadata: Test1_ContentfulMetadata
}

scalar Never

enum Test1_SectionBlockTextStyle {
  default
  narrow
}

type Test1_SectionBlockTextCollection {
  skip: Int!
  limit: Int!
  total: Int!
  items: [Test1_SectionBlockText]!
}

type Test1_Page implements Test1_Entry {
  title: String!
  subpages: Test1_PageCollection
  meta: Test1_PageMetadata
  sections: Test1_PageSectionCollection
  flags: [Test1_PageFlag]
}

type Test1_PageCollection {
  skip: Int!
  limit: Int!
  total: Int!
  items: [Test1_Page]!
}

type Test1_PageMetadata implements Test1_Entry {
  canonicalLink: String
  metaKeywords: String
  metaFlag: [Test1_PageMetadataMetaFlag]
  structuredData: JSON
}

enum Test1_PageMetadataMetaFlag {
  no-follow
  no-index
}

\\"\\"\\"
The \`JSON\` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
\\"\\"\\"
scalar JSON @specifiedBy(url: \\"http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf\\")

type Test1_PageSectionCollection {
  skip: Int!
  limit: Int!
  total: Int!
  items: [Test1_PageSection]!
}

union Test1_PageSection = Test1_SectionBlockText | Test1_SectionCarousel

type Test1_SectionCarousel implements Test1_Entry {
  images: Test1_AssetCollection
  slideInterval: Float
}

enum Test1_PageFlag {
  Not Shareable
  Set Campus Cookie
}

type Test1_SectionCarouselCollection {
  skip: Int!
  limit: Int!
  total: Int!
  items: [Test1_SectionCarousel]!
}

type Test1_PageMetadataCollection {
  skip: Int!
  limit: Int!
  total: Int!
  items: [Test1_PageMetadata]!
}
"
`;

exports[`SchemaBuilder writes schema 1`] = `
"type Query {
  asset(id: String): Asset
  assetCollection(skip: String, limit: String): AssetCollection
  sectionBlockText(id: String): SectionBlockText
  sectionBlockTextCollection(skip: String, limit: String): SectionBlockTextCollection
  page(id: String): Page
  pageCollection(skip: String, limit: String): PageCollection
  sectionCarousel(id: String): SectionCarousel
  sectionCarouselCollection(skip: String, limit: String): SectionCarouselCollection
  pageMetadata(id: String): PageMetadata
  pageMetadataCollection(skip: String, limit: String): PageMetadataCollection
}

type Asset {
  sys: Sys
  contentfulMetadata: ContentfulMetadata
  title: String
  description: String
  contentType: String
  fileName: String
  url: String
  size: Int
  width: Int
  height: Int
}

type Sys {
  id: String
  spaceId: String
  environmentId: String
}

type ContentfulMetadata {
  tags: [ContentfulTag]!
}

type ContentfulTag {
  id: String!
  name: String!
}

type AssetCollection {
  skip: Int!
  limit: Int!
  total: Int!
  items: [Asset]!
}

type SectionBlockText implements Entry {
  internalTitle: Never
  body: String!
  bookmarkTitle: String
  style: SectionBlockTextStyle
}

interface Entry {
  sys: Sys
  contentfulMetadata: ContentfulMetadata
}

scalar Never

enum SectionBlockTextStyle {
  default
  narrow
}

type SectionBlockTextCollection {
  skip: Int!
  limit: Int!
  total: Int!
  items: [SectionBlockText]!
}

type Page implements Entry {
  title: String!
  subpages: PageCollection
  meta: PageMetadata
  sections: PageSectionCollection
  flags: [PageFlag]
}

type PageCollection {
  skip: Int!
  limit: Int!
  total: Int!
  items: [Page]!
}

type PageMetadata implements Entry {
  canonicalLink: String
  metaKeywords: String
  metaFlag: [PageMetadataMetaFlag]
  structuredData: JSON
}

enum PageMetadataMetaFlag {
  no-follow
  no-index
}

\\"\\"\\"
The \`JSON\` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
\\"\\"\\"
scalar JSON @specifiedBy(url: \\"http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf\\")

type PageSectionCollection {
  skip: Int!
  limit: Int!
  total: Int!
  items: [PageSection]!
}

union PageSection = SectionBlockText | SectionCarousel

type SectionCarousel implements Entry {
  images: AssetCollection
  slideInterval: Float
}

enum PageFlag {
  Not Shareable
  Set Campus Cookie
}

type SectionCarouselCollection {
  skip: Int!
  limit: Int!
  total: Int!
  items: [SectionCarousel]!
}

type PageMetadataCollection {
  skip: Int!
  limit: Int!
  total: Int!
  items: [PageMetadata]!
}
"
`;
